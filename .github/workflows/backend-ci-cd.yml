name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['backend/**']
  pull_request:
    branches: [main]
    paths: ['backend/**']

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run linter
      run: |
        cd backend
        npm run lint
    
    - name: Run tests
      run: |
        cd backend
        npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
        NODE_ENV: test
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        path: backend

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Build application
      run: |
        cd backend
        npm run build
      env:
        NODE_ENV: staging
    
    - name: Deploy to Render (Staging)
      run: |
        echo "Deploying to staging environment..."
        # 這裡會觸發 Render 的自動部署
        # 實際部署由 Render 的 webhook 處理
      env:
        RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # 這裡可以添加針對測試環境的冒煙測試
        curl -f https://staging-api.cardstrategy.com/api/health || exit 1

  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Build application
      run: |
        cd backend
        npm run build
      env:
        NODE_ENV: production
    
    - name: Deploy to Render (Production)
      run: |
        echo "Deploying to production environment..."
        # 這裡會觸發 Render 的自動部署
        # 實際部署由 Render 的 webhook 處理
      env:
        RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
    
    - name: Run health checks
      run: |
        echo "Running health checks against production environment..."
        # API 健康檢查
        curl -f https://api.cardstrategy.com/api/health || exit 1
        
        # 數據庫連接檢查
        curl -f https://api.cardstrategy.com/api/health/database || exit 1
        
        # Redis 連接檢查
        curl -f https://api.cardstrategy.com/api/health/redis || exit 1
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # 簡單的性能測試
        for i in {1..5}; do
          start_time=$(date +%s%N)
          curl -s https://api.cardstrategy.com/api/health > /dev/null
          end_time=$(date +%s%N)
          response_time=$(( (end_time - start_time) / 1000000 ))
          echo "Request $i: ${response_time}ms"
          
          if [ $response_time -gt 2000 ]; then
            echo "Warning: Response time > 2s"
          fi
        done
    
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully"
        # 這裡可以添加通知邏輯，如發送到 Slack、Discord 等
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              'text': '✅ CardStrategy 生產環境部署成功\n版本: ${{ github.sha }}\n時間: $(date)'
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Deployment failed, initiating rollback..."
        # 這裡可以添加回滾邏輯
        # 例如：回滾到上一個穩定版本
    
    - name: Notify rollback
      run: |
        echo "Rollback completed"
        # 發送回滾通知
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              'text': '⚠️ CardStrategy 生產環境部署失敗，已回滾\n版本: ${{ github.sha }}\n時間: $(date)'
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi
