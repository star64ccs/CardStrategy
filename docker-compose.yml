version: '3.8'

services:
  # PostgreSQL 數據庫
  postgres:
    image: postgres:15-alpine
    container_name: cardstrategy_postgres
    environment:
      POSTGRES_DB: cardstrategy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cardstrategy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 緩存
  redis:
    image: redis:7-alpine
    container_name: cardstrategy_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cardstrategy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 後端 API 服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cardstrategy_backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cardstrategy
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRE: ${JWT_EXPIRE:-24h}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      UPLOAD_PATH: /app/uploads
      LOG_PATH: /app/logs
      MODEL_PATH: /app/models
      EXPORT_PATH: /app/exports
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_exports:/app/exports
    ports:
      - "3000:3000"
    networks:
      - cardstrategy_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: cardstrategy_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - backend_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cardstrategy_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 監控服務 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: cardstrategy_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cardstrategy_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 監控服務 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: cardstrategy_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - cardstrategy_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # 日誌聚合 (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cardstrategy_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # 日誌聚合 (ELK Stack - Logstash)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: cardstrategy_logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - backend_logs:/var/log/app
    ports:
      - "5044:5044"
    networks:
      - cardstrategy_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # 日誌聚合 (ELK Stack - Kibana)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cardstrategy_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - cardstrategy_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # 備份服務
  backup:
    image: postgres:15-alpine
    container_name: cardstrategy_backup
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - ./backup:/backup
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cardstrategy_network
    command: >
      sh -c "
        while true; do
          echo 'Starting backup...'
          pg_dump -h postgres -U postgres -d cardstrategy > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed'
          sleep 86400
        done
      "
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_models:
    driver: local
  backend_exports:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  cardstrategy_network:
    driver: bridge
