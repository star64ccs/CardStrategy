version: '3.8'

services:
  # 前端服務
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cardstrategy_frontend_prod
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - cardstrategy_network

  # 後端 API 服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: cardstrategy_backend_prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cardstrategy
      - DB_USER=cardstrategy_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=24h
      - CORS_ORIGIN=${CORS_ORIGIN}
      - UPLOAD_PATH=/app/uploads
      - LOG_PATH=/app/logs
      - MODEL_PATH=/app/models
      - EXPORT_PATH=/app/exports
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
      - models:/app/models
      - exports:/app/exports
    depends_on:
      - postgres
      - redis
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # PostgreSQL 數據庫
  postgres:
    image: postgres:15-alpine
    container_name: cardstrategy_postgres_prod
    environment:
      POSTGRES_DB: cardstrategy
      POSTGRES_USER: cardstrategy_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # Redis 緩存
  redis:
    image: redis:7-alpine
    container_name: cardstrategy_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: cardstrategy_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: cardstrategy_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cardstrategy_network
    restart: unless-stopped

  # Grafana 監控面板
  grafana:
    image: grafana/grafana:latest
    container_name: cardstrategy_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - cardstrategy_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads:
  logs:
  models:
  exports:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  cardstrategy_network:
    driver: bridge
